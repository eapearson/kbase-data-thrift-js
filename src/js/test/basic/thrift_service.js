/*global define */
/*jslint white:true */
define(["thrift", "kb_basic_types"], function (Thrift, basic) {
"use strict";
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

basic.thrift_service_get_a_map_args = function(args) {
  this.mapkeys = null;
  if (args) {
    if (args.mapkeys !== undefined) {
      this.mapkeys = args.mapkeys;
    }
  }
};
basic.thrift_service_get_a_map_args.prototype = {};
basic.thrift_service_get_a_map_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.mapkeys = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.mapkeys.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

basic.thrift_service_get_a_map_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_a_map_args');
  if (this.mapkeys !== null && this.mapkeys !== undefined) {
    output.writeFieldBegin('mapkeys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.mapkeys.length);
    for (var iter7 in this.mapkeys)
    {
      if (this.mapkeys.hasOwnProperty(iter7))
      {
        iter7 = this.mapkeys[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

basic.thrift_service_get_a_map_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
basic.thrift_service_get_a_map_result.prototype = {};
basic.thrift_service_get_a_map_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.success = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString().value;
          val15 = input.readDouble().value;
          this.success[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

basic.thrift_service_get_a_map_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_a_map_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.success));
    for (var kiter16 in this.success)
    {
      if (this.success.hasOwnProperty(kiter16))
      {
        var viter17 = this.success[kiter16];
        output.writeString(kiter16);
        output.writeDouble(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

basic.thrift_service_add_integers_args = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
  }
};
basic.thrift_service_add_integers_args.prototype = {};
basic.thrift_service_add_integers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.x = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.y = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

basic.thrift_service_add_integers_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_add_integers_args');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I64, 1);
    output.writeI64(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I64, 2);
    output.writeI64(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

basic.thrift_service_add_integers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
basic.thrift_service_add_integers_result.prototype = {};
basic.thrift_service_add_integers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

basic.thrift_service_add_integers_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_add_integers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

basic.thrift_serviceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
basic.thrift_serviceClient.prototype = {};
basic.thrift_serviceClient.prototype.get_a_map = function(mapkeys, callback) {
  if (callback === undefined) {
    this.send_get_a_map(mapkeys);
    return this.recv_get_a_map();
  } else {
    var postData = this.send_get_a_map(mapkeys, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_a_map);
  }
};

basic.thrift_serviceClient.prototype.send_get_a_map = function(mapkeys, callback) {
  this.output.writeMessageBegin('get_a_map', Thrift.MessageType.CALL, this.seqid);
  var args = new basic.thrift_service_get_a_map_args();
  args.mapkeys = mapkeys;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

basic.thrift_serviceClient.prototype.recv_get_a_map = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new basic.thrift_service_get_a_map_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_a_map failed: unknown result';
};
basic.thrift_serviceClient.prototype.add_integers = function(x, y, callback) {
  if (callback === undefined) {
    this.send_add_integers(x, y);
    return this.recv_add_integers();
  } else {
    var postData = this.send_add_integers(x, y, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_add_integers);
  }
};

basic.thrift_serviceClient.prototype.send_add_integers = function(x, y, callback) {
  this.output.writeMessageBegin('add_integers', Thrift.MessageType.CALL, this.seqid);
  var args = new basic.thrift_service_add_integers_args();
  args.x = x;
  args.y = y;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

basic.thrift_serviceClient.prototype.recv_add_integers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new basic.thrift_service_add_integers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'add_integers failed: unknown result';
};

return basic;
});
